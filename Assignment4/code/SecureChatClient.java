import java.math.BigInteger;
import java.util.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;

public class SecureChatClient extends JFrame implements Runnable, ActionListener {

    public static final int PORT = 8765;

    ObjectInputStream myReader;
    ObjectOutputStream myWriter;
    BigInteger publicKey = null, publicMod = null;
    String myName = null;
    String ciphType = null;
    SymCipher cipher;
    byte[] encoded = null;

    JTextArea outputArea;
    JLabel prompt;
    JTextField inputField;
    String serverName;
    Socket connection;

    public SecureChatClient ()
    {
        try {
            serverName = JOptionPane.showInputDialog(this, "Enter the server name: ");
            myName = JOptionPane.showInputDialog(this, "Enter your user name: ");
            InetAddress addr = InetAddress.getByName(serverName);
            connection = new Socket(addr, PORT);   // Connect to server with new
            // Socket
            myWriter = new ObjectOutputStream(connection.getOutputStream());
            myWriter.flush();
            myReader = new ObjectInputStream(connection.getInputStream());   // Get Reader and Writer

            this.setTitle(myName);
            //Set up GUI
            Box b = Box.createHorizontalBox();  // Set up graphical environment for
            outputArea = new JTextArea(8, 30);  // user
            outputArea.setEditable(false);
            outputArea.setSize(500, 200);
            b.add(new JScrollPane(outputArea));

            outputArea.append("Welcome to the Chat Group, " + myName + "\n");

            inputField = new JTextField("");  // This is where user will type input
            inputField.addActionListener(this);
            inputField.setSize(500, 50);

            prompt = new JLabel("Type your messages below:");
            prompt.setSize(500, 10);
            Container c = getContentPane();

            c.add(b, BorderLayout.NORTH);
            c.add(prompt, BorderLayout.CENTER);
            c.add(inputField, BorderLayout.SOUTH);

            Thread outputThread = new Thread(this);  // Thread is to receive strings
            outputThread.start();                    // from Server

            addWindowListener(
                    new WindowAdapter()
                    {
                        public void windowClosing(WindowEvent e)
                        {
                            try {
                                String close = new String("CLIENT CLOSING");
                                byte[] encrypt = cipher.encode(close); //Encrypt "CLIENT CLOSING"
                                myWriter.writeObject(encrypt); //write to myWriter object
                                System.exit(0);
                            }
                            catch(IOException E){
                                System.out.println("Problem closing");
                            }
                        }
                    }
            );

            setSize(500, 260);
            setVisible(true);

        }
        catch (Exception e)
        {
            System.out.println("Problem starting client!");
        }
    }

    public void run()
    {
        while (true)
        {
            try {
                Object currMsg = myReader.readObject(); //Read from myReader stream

                if(publicKey == null) { //Check if publicKey (E) has value
                    publicKey = new BigInteger(currMsg.toString());
                    System.out.println("E is " + publicKey);
                }
                else if(publicMod == null) { //Then check if publicMod (N) has value
                    publicMod = new BigInteger(currMsg.toString());
                    System.out.println("N is " + publicMod);
                }
                else if(ciphType == null) { //Next, check if there's ciphType specified or not
                    ciphType = currMsg.toString();
                    if(ciphType.equals("Add")) { //Make right corresponding cipher objects
                        cipher = new Add128();
                        System.out.println("Add128 encryption used");
                    }
                    else {
                        cipher = new Substitute();
                        System.out.println("Substitute encryption used");
                    }
                    BigInteger key = new BigInteger(1, cipher.getKey());
                    key = key.modPow(publicKey, publicMod); //do (key^E) (mod N) and send to server
                    System.out.println("Symmetric key generated by the client is " + key);
                    myWriter.writeObject(key);

                    byte[] nameBytes = cipher.encode(myName); //Encode username and send to server
                    myWriter.writeObject(nameBytes);
                }
                else { //Means client is receiving messages the user entered
                    byte[] encryptMessage = (byte []) currMsg;
                    String decoded = cipher.decode(encryptMessage); //Decode message
                    outputArea.append(decoded + "\n"); //Append to outputArea textbox

                    System.out.println("Array of bytes received is " + Arrays.toString(encoded));
                    System.out.println("Decrypted array of bytes is " + Arrays.toString(decoded.getBytes()));
                    System.out.println("Corresponding String is " + decoded);
                    System.out.println();
                }
            }
            catch (Exception e)
            {
                System.out.println(e +  ", closing client!");
                break;
            }
        }
        System.exit(0);
    }

    public void actionPerformed(ActionEvent e)
    {
        try {
            String currMsg = e.getActionCommand();      // Get input value
            currMsg = myName + ": " + currMsg;
            inputField.setText("");
            encoded = cipher.encode(currMsg);   //Encrypt message
            System.out.println("Original String Message is " + currMsg);
            System.out.println("Corresponding array of bytes is " + Arrays.toString(currMsg.getBytes()));
            System.out.println("Encrypted array of bytes is " + Arrays.toString(encoded));
            System.out.println();
            myWriter.writeObject(encoded);
        }
        catch(Exception E){
            System.out.println("Problem writing message");
        }
    }


    public static void main(String [] args)
    {
        SecureChatClient JR = new SecureChatClient();
        JR.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }
}
